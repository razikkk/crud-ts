<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>CRUD Page</title>
    <style>
      body {
        background-color: #1a1a1a;
        font-family: "Arial", sans-serif;
        margin: 0;
        padding: 0 20px;
        color: #fff;
      }

      .navbar {
        display: flex;
        justify-content: space-between;
        align-items: center;
        background-color: #2b2b2b;
        padding: 15px 20px;
        border-radius: 10px;
        margin-bottom: 20px;
        box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.5);
      }

      .navbar .site-name {
        font-size: 24px;
        font-weight: bold;
        color: #ffd700;
        font-family: "Georgia", serif;
      }

      .navbar .search-add {
        display: flex;
        align-items: center;
        gap: 10px;
      }

      .search-bar {
        padding: 8px 15px;
        border: none;
        border-radius: 5px;
        font-size: 16px;
        width: 200px;
      }

      .search-bar::placeholder {
        color: #888;
      }

      .crud-button {
        background-color: #ffd700;
        color: #1a1a1a;
        border: none;
        padding: 10px 15px;
        border-radius: 5px;
        cursor: pointer;
        font-size: 16px;
        transition: background-color 0.3s, transform 0.3s;
      }

      .crud-button:hover {
        background-color: #e6b800;
        transform: translateY(-3px);
      }

      .crud-button:active {
        transform: translateY(0);
      }

      .container {
        width: 90%;
        max-width: 1200px;
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
        gap: 20px;
        margin: 0 auto;
      }

      .crud-box {
        background: #2b2b2b;
        border-radius: 10px;
        box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.5);
        padding: 20px;
        text-align: center;
      }

      .crud-box h2,
      .crud-box h5 {
        color: #ffd700;
        margin-bottom: 10px;
      }

      .crud-buttons {
        display: flex;
        gap: 10px;
        justify-content: center;
        flex-wrap: wrap;
      }

      /* Modal styles */
      .modal {
        display: none;
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.8);
        justify-content: center;
        align-items: center;
      }

      .modal-content {
        background: #2b2b2b;
        padding: 20px;
        border-radius: 10px;
        width: 100%;
        max-width: 400px;
        text-align: center;
        box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.5);
        transform: translateY(-100%);
        opacity: 0;
        transition: transform 0.5s ease, opacity 0.5s ease;
      }

      .modal.show .modal-content {
        transform: translateY(0);
        opacity: 1;
      }

      .modal-content h3 {
        color: #ffd700;
        margin-bottom: 20px;
      }

      .modal-content input {
        width: 100%;
        padding: 10px;
        margin: 10px 0;
        border-radius: 5px;
        border: none;
        font-size: 16px;
      }

      .modal-content .modal-buttons {
        display: flex;
        gap: 10px;
        justify-content: flex-end;
      }

      .modal-content .modal-button {
        background-color: #ffd700;
        color: #1a1a1a;
        border: none;
        padding: 10px 15px;
        border-radius: 5px;
        cursor: pointer;
        font-size: 16px;
      }

      .modal-content .modal-button:hover {
        background-color: #e6b800;
      }

      .modal-content .close-button {
        background-color: #888;
        color: #fff;
      }

      .modal {
        display: none;
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.8);
        justify-content: center;
        align-items: center;
      }

      .modal-content {
        background: #2b2b2b;
        padding: 20px;
        border-radius: 10px;
        width: 100%;
        max-width: 400px;
        text-align: center;
        box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.5);
        transform: translateY(-100%);
        opacity: 0;
        transition: transform 0.5s ease, opacity 0.5s ease;
      }

      .modal.show .modal-content {
        transform: translateY(0);
        opacity: 1;
      }

      .modal-content h3 {
        color: #ffd700;
        margin-bottom: 20px;
      }

      .modal-content input {
        width: 100%;
        padding: 10px;
        margin: 10px 0;
        border-radius: 5px;
        border: none;
        font-size: 16px;
      }

      .modal-content .modal-buttons {
        display: flex;
        gap: 10px;
        justify-content: flex-end;
      }

      .modal-content .modal-button {
        background-color: #ffd700;
        color: #1a1a1a;
        border: none;
        padding: 10px 15px;
        border-radius: 5px;
        cursor: pointer;
        font-size: 16px;
      }

      .modal-content .modal-button:hover {
        background-color: #e6b800;
      }

      .modal-content .close-button {
        background-color: #888;
        color: #fff;
      }
    </style>
  </head>
  <body>
    <nav class="navbar">
      <div class="site-name">
        My CRUD App
        <button
          style="margin-left: 10px"
          class="crud-button"
          onclick="openModal()"
        >
          Add User
        </button>
      </div>
      <div class="search-add">
        <input type="text" class="search-bar" placeholder="Search..." />
        <button class="crud-button" onclick="openEditModal()">Search</button>
      </div>
    </nav>

    <div class="container" id="wholeDiv">
      <% users.forEach((user) => { %>
      <div class="crud-box">
        <h2>Name: <%= user.name %></h2>
        <h5>Email: <%= user.email %></h5>
        <h5>Age: <%= user.age %></h5>
        <div class="crud-buttons">
          <button
            class="crud-button"
            id="edit-btn"
            data-user-id="<%= user._id %>"
            data-user-name="<%= user.name %>"
            data-user-email="<%= user.email %>"
            data-user-age="<%= user.age %>"
          >
            Edit
          </button>
          <button
            class="crud-button"
            id="delete-btn"
            data-user-id="<%= user._id %>"
          >
            Delete
          </button>
        </div>
      </div>
      <% }) %>
    </div>

    <!-- Modal for Adding User -->
    <div id="addUserModal" class="modal">
      <div class="modal-content">
        <h3>Add New User</h3>
        <input type="text" placeholder="Name" id="userName" required />
        <input type="email" placeholder="Email" id="userEmail" required />
        <input type="number" placeholder="Age" id="userAge" required />
        <span style="color: red" id="addError"></span>
        <div class="modal-buttons">
          <button class="modal-button close-button" onclick="closeModal()">
            Cancel
          </button>
          <button type="submit" id="addSubmitButton" class="modal-button">
            Submit
          </button>
        </div>
      </div>
    </div>

    <!-- editModal -->
    <div id="editUserModal" class="modal">
      <div class="modal-content">
        <h3>Edit User</h3>
        <input type="text" placeholder="Name" id="editUserName" required />
        <input type="email" placeholder="Email" id="editUserEmail" required />
        <input type="number" placeholder="Age" id="editUserAge" required />
        <span style="color: red" id="editError"></span>
        <div class="modal-buttons">
          <button class="modal-button close-button" onclick="closeEditModal()">
            Cancel
          </button>
          <button type="submit" id="editSubmitButton" class="modal-button">
            Update
          </button>
        </div>
      </div>
    </div>

    <script>
      const modal = document.getElementById("addUserModal");

      function openModal() {
        modal.classList.add("show");
        modal.style.display = "flex";
      }

      function closeModal() {
        document.getElementById("userName").value = "";
        document.getElementById("userEmail").value = "";
        document.getElementById("userAge").value = "";
        modal.classList.remove("show");
        setTimeout(() => {
          modal.style.display = "none";
        }, 500); // Delay to match the animation duration
      }

      // Close the modal if user clicks outside the modal content
      window.onclick = function (event) {
        if (event.target == modal) {
          closeModal();
        }
      };
      function openEditModal() {
        document.getElementById("editUserModal").classList.add("show");
        document.getElementById("editUserModal").style.display = "flex";
      }

      function closeEditModal() {
        document.getElementById("editUserModal").classList.remove("show");
        setTimeout(() => {
          document.getElementById("editUserModal").style.display = "none";
        }, 500);
      }

      let nameRegex = /^[a-zA-Z]+$/;
      let emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;

      const addSubmitButton = document
        .getElementById("addSubmitButton")
        .addEventListener("click", async (event) => {
          event.preventDefault();

          const error = document.getElementById("addError");

          const name = document.getElementById("userName").value.trim();
          const email = document.getElementById("userEmail").value.trim();
          const age = document.getElementById("userAge").value.trim();

          if (!nameRegex.test(name)) {
            error.innerHTML = "Please enter a valid name (A - Z)";
            return;
          } else {
            error.innerHTML = "";
          }

          if (!emailRegex.test(email)) {
            error.innerHTML = "Please enter a valid email";
            return;
          } else {
            error.innerHTML = "";
          }

          if (age < 5 || age > 100) {
            error.innerHTML = "Age should be between 5 - 100";
            return;
          } else {
            error.innerHTML = "";
          }

          const response = await fetch("/addUser", {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify({ name, email, age }),
          });

          if (response.ok) {
            closeModal();
            location.reload();
            error.innerHTML = "";
          } else {
            const data = await response.json();
            error.innerHTML = data.message;
          }
        });

      document
        .getElementById("wholeDiv")
        .addEventListener("click", async (event) => {
          if (event.target.id == "delete-btn") {
            event.preventDefault();

            const userId = event.target.getAttribute("data-user-id");

            const response = await fetch(`/deleteUser/${userId}`, {
              method: "DELETE",
            });

            if (response.ok) {
              location.reload();
            } else {
              console.log(error.message);
            }
          } else if (event.target.id == "edit-btn") {
            event.preventDefault();
            console.log("hello");

            const userId = event.target.getAttribute("data-user-id");
            const name = event.target.getAttribute("data-user-name");
            const email = event.target.getAttribute("data-user-email");
            const age = event.target.getAttribute("data-user-age");

            const nameInput = document.getElementById("editUserName");
            const emailInput = document.getElementById("editUserEmail");
            const ageInput = document.getElementById("editUserAge");

            nameInput.value = name;
            emailInput.value = email;
            ageInput.value = age;

            openEditModal();
            const initialName = nameInput.value.trim();
            const initialEmail = emailInput.value.trim();
            const initialAge = ageInput.value.trim();
            document
              .getElementById("editSubmitButton")
              .addEventListener("click", async (event) => {
                event.preventDefault();

                const finalName = nameInput.value.trim();
                const finalEmail = emailInput.value.trim();
                const finalAge = ageInput.value.trim();
                const error = document.getElementById('editError')

                if (
                  initialName === finalName &&
                  initialEmail === finalEmail &&
                  initialAge === finalAge
                ) {
                  closeModal();
                  return;
                }

                if (!nameRegex.test(finalName)) {
                  error.innerHTML = "Please enter a valid name (A - Z)";
                  return;
                } else {
                  error.innerHTML = "";
                }

                if (!emailRegex.test(finalEmail)) {
                  error.innerHTML = "Please enter a valid email";
                  return;
                } else {
                  error.innerHTML = "";
                }

                if (finalAge < 5 || finalAge > 100) {
                  error.innerHTML = "Age should be between 5 - 100";
                  return;
                } else {
                  error.innerHTML = "";
                }

                const response = await fetch(`/editUser/${userId}`, {
                  method: "PATCH",
                  headers: {
                    "Content-Type": "application/json",
                  },
                  body: JSON.stringify({
                    name: finalName,
                    email: finalEmail,
                    age: finalAge,
                  }),
                });

                if (response.ok) {
                  closeEditModal();
                  location.reload();
                }
              });
          }
        });
    </script>
  </body>
</html>
